;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	06/01/2022
;	Project: Fun Binary Counter
;	Group:   Ahmad Khatib 	- 1182828
;		     Anas Nimer   	- 1180180
;		     Marwa Toame	- 118283
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; PROCESSOR AND CONGIGURATION WORD
PROCESSOR 16F877A
__CONFIG 0X3731

; LABEL EQUATES
INCLUDE "P16F877A.INC"
PERIOD EQU 20H	; FOR STORING CURRENT COUNTING PERIOD
STEP   EQU 21H	; FOR STORING COUNTING STEP SIZE
COUNTS EQU 22H	; FOR STORING NUMBER OF TIMES TMR1 INTERRUPT OCCURED
TEMP   EQU 23H	; FOR STORING TEMPORARY VALUES

			; SELECT BANK 0 TO WRITE CODE IN
			ORG 000
			
			GOTO INIT
			
			; SELECT BANK 4 TO WRITE INTERRUPTS
			ORG 004
			
			; SELECT BANK 0
			BANKSEL PORTA
			
			; TURN OFF INTERRUPTS
			MOVLW B'00000000'
			MOVWF INTCON
			
			; CHECK IF TMR1 OVERFLOW INTERRUPT OCCURED
			BTFSC PIR1, TMR1IF
			GOTO TMR1_INT
			
			; SELECT BANK0
			BANKSEL PORTB
			
			; READ PORTB 
			MOVF PORTB
			
			; CHECK IF BUTTON 1 WAS PRESSED
			BTFSS PORTB, 4 	; BUTTON 1 IS CONNECTED TO RB4
			GOTO INC_STEP  	; IF BUTTON 1 WAS CLICKED, INCREMENT STEP
			
			; CHECK IF BUTTON 2 WAS PRESSED
			BTFSS PORTB, 5 	; BUTTON 2 IS CONNECTED TO RB5
			GOTO INC_PERIOD ; IF BUTTON 2 WAS CLICKED, INCREMENT PERIOD

		
END_INT		; CLEAR PORTB AFTER THE INTERRUPTS
			BANKSEL PORTB
			CLRF PORTB
			
			; TURN ON INTERRUPTS
			MOVLW B'11001000'
			MOVWF INTCON
			
			; RETURN FROM INTERRUPT
			RETFIE
	
INIT		; ENABLE GLOBAL, PERIPHERAL, RB CHANGE INTERRUPTS
			BANKSEL PORTA 	  ; SELECT BANK 0
			MOVLW B'11001000'
			MOVWF INTCON
			
			; ENABLE TMR1 IN TIMER MODE
			BSF T1CON, TMR1ON
			
			; INTERRUPT EACH 0.5 SECOND -> f = 2Hz
			; COUNTER = 65536 - 1MHz / (8 * 2) = (3036)D = (BDC)H
			MOVLW H'DC'
			MOVWF TMR1L
			MOVLW H'0B'
			MOVWF TMR1H
			
			; SET PRESCALER TO 8
			BSF T1CON, T1CKPS1
			BSF T1CON, T1CKPS0
			
			; ENABLE TMR1 OVERFLOW INTERRUPT
			BANKSEL PIE1
			BSF PIE1 , TMR1IE
			
			; SET PORTA AS DIGITAL OUTPUT
			BANKSEL ADCON1 	; SELECT BANK 1
			MOVLW H'6' 		; VALUE TO SET PORTA AS DIGITAL
			MOVWF ADCON1 	; SET PORTA AS DIGITAL
			MOVLW H'00' 	; VALUE TO SET PORTA AS OUTPUT
			MOVWF TRISA 	; SET PORTA PINS AS OUTPUT
			
			; SET PORTD AS OUTPUT
			MOVLW B'00000000'
			MOVWF TRISD
			
			; INITIALIZE PORTD WITH ZEROS
			BANKSEL PORTD
			MOVWF PORTD
			
			; CLEAR PORTB WHERE THE PUSH BUTTON ARE
			CLRF PORTB
			
			; SET RB4 & RB6 AS INPUT
			BANKSEL TRISB
			MOVLW B'00110000'
			MOVWF TRISB
			
			; INITALIZE STEP, PERIOD
			BANKSEL PORTB
			MOVLW H'01'
			MOVWF STEP 		; STEP <- 1
			MOVWF PERIOD 	; PERIOD <- 1
			
			; INITIALIZE THE COUNTS
			MOVLW H'00'
			MOVWF COUNTS
		
; TO KEEP PROGRAM RUNNING	
LOOP 		NOP
			GOTO LOOP

; ISR TO INCREMENT STEP
INC_STEP	; INCREMENT STEP
			BANKSEL PORTA
			INCF STEP
			
			; CHECK IF STEP REACHED 6
			BTFSS STEP, 1 ; IF BIT #1 IS 0
			GOTO END_INT  ; END THE INTERRUPT
			
			BTFSS STEP, 2 ; ALSO IF BIT #2 IS 0
			GOTO END_INT  ; END THE INTERRUPT
			
			MOVLW H'01'   ; ELSE
			MOVWF STEP    ; ASSIGN STEP <- 1
			
			GOTO END_INT

; ISR TO INCREMENT PERIOD
INC_PERIOD	; INCREMENT PERIOD
			BANKSEL PORTA
			INCF PERIOD
			
			;CHECK IF PERIOD REACHED 6
			BTFSS PERIOD, 1 ; IF BIT #1 IS 0
			GOTO END_INT  	; END THE INTERRUPT
			
			BTFSS PERIOD, 2 ; ALSO IF BIT #2 IS 0
			GOTO END_INT  	; END THE INTERRUPT
			
			MOVLW H'01'   	; ELSE
			MOVWF PERIOD    ; ASSIGN PERIOD <- 1
			
			GOTO END_INT
			
TMR1_INT	; CLEAR TMR1 OVERFLOW INTERRUPT FLAG
			BANKSEL PIR1
			BCF PIR1, TMR1IF
			
			; RESET THE COUNT AND PRESCALER
			MOVLW H'DC'
			MOVWF TMR1L
			MOVLW H'0B'
			MOVWF TMR1H
			
			; SET PRESCALER TO 8
			BSF T1CON, T1CKPS1
			BSF T1CON, T1CKPS0
			
			; INCREMENT THE COUNTS
			INCF COUNTS
			
			; CHECK IF THE PERIOD IS REACHED
			
			; DIVIDE COUNTS BY 2
			MOVF COUNTS, W 	; W <- COUNTS
			MOVWF TEMP     	; TEMP <- COUNTS
			RRF TEMP, F    	; TEMP <- TEMP / 2
			BCF TEMP, 7
			
			MOVF PERIOD, W 	; W <- PERIOD
			
			; SUBTRACT TEMP FROM PERIOD
			SUBWF TEMP, F 	; TEMP <- TEMP - PERIOD
			BTFSS STATUS, Z ; CHECK ZERO FLAG
			GOTO CHECK_C   	; IF Z = 0, THEN WE CHECK IF TEMP > PERIOD
			GOTO CONT_INT	; IF Z = 1, THEN TEMP = PERIOD, WE INCREMENT PORTD

			; IF THE CARRY C = 1, THEN TEMP > PERIOD
CHECK_C		BTFSS STATUS, C
			GOTO END_INT
			
CONT_INT	; RESET COUNTS
			CLRF COUNTS
			
			; INCREMENT PORTD
			MOVF STEP, W 	; W <- STEP
			ADDWF PORTD, F 	; PORTD <- PORTD + STEP
			
			; CHECK IF PORTD > 32
			BTFSC PORTD, 5		; CHECK BIT #5 IF EQUAL 1
			GOTO RESET_COUNT	; RESET PORTD COUNT IF RD5 = 1
			
			BTFSC PORTD, 6		; CHECK BIT #6 IF EQUAL 1
			GOTO RESET_COUNT	; RESET PORTD COUNT IF RD6 = 1
			
			BTFSC PORTD, 7		; CHECK BIT #7 IF EQUAL 1
			GOTO RESET_COUNT	; RESET PORTD COUNT IF RD7 = 1
			
			GOTO END_INT
			
RESET_COUNT	; RESET PORTD COUNT
			MOVLW H'00'
			MOVWF PORTD
			GOTO END_INT
								
END